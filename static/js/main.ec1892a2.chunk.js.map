{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Garden","state","rows","className","this","map","row","i","key","React","Component","GardenRow","squares","square","GRASS","DIRT","PLANTS","GardenSquare","square_state","plant_name","undefined","handleClick","e","current_state","setState","random","Math","floor","console","log","preventDefault","onClick","SeedsList","plant","icon","src","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,qICKrCC,G,uNACJC,MAAQ,CACNC,KAAM,CAAC,EAAG,EAAG,I,wEAIb,OACI,yBAAKC,UAAU,aACdC,KAAKH,MAAMC,KAAKG,KAAI,SAASC,EAAKC,GAC/B,OAAO,kBAAC,EAAD,CAAWC,IAAKD,EAAGD,IAAKA,Y,GATtBG,IAAMC,YAgBrBC,E,2MACJV,MAAQ,CACNW,QAAS,CAAC,EAAG,EAAG,I,wEAIhB,OACI,yBAAKT,UAAU,cACZC,KAAKH,MAAMW,QAAQP,KAAI,SAASQ,EAAQN,GACrC,OAAO,kBAAC,EAAD,CAAcC,IAAKD,EAAGM,OAAQA,Y,GAT3BJ,IAAMC,WAgB1BI,EAAQ,EACRC,EAAK,EACLC,EAAS,CAAC,UAAW,SAAU,SAAU,SAAU,SAAU,SAE3DC,E,2MACJhB,MAAQ,CACNiB,aAAcJ,EACdK,gBAAYC,G,EAGdjB,UAAY,WACV,YAA6BiB,IAA1B,EAAKnB,MAAMkB,WACN,UAAN,OAAiB,EAAKlB,MAAMkB,YAE1B,EAAKlB,MAAMiB,eAAiBJ,EACvB,eACL,EAAKb,MAAMiB,eAAiBH,EACvB,cACF,U,EAGTM,YAAc,SAACC,GACb,IAAIC,EAAgB,EAAKtB,MAAMiB,aAC/B,GAAIK,IAAkBR,EACpB,EAAKS,SAAS,CAACN,aAAcK,EAAc,QAExC,CACH,IACIE,EAASC,KAAKC,MAAM,GAAKD,KAAKD,SAAV,EAAqC,GAC7DG,QAAQC,IAAIJ,GACZ,IAAIN,EAAaH,EAAOS,GACxBG,QAAQC,IAAIV,GACZ,EAAKK,SAAS,CAACL,oBACIC,IAAfD,GACF,EAAKK,SAAS,CAACN,aAAcJ,IAEjCQ,EAAEQ,kB,wEAIF,OACE,yBAAK3B,UAAWC,KAAKD,YAAa4B,QAAS3B,KAAKiB,kB,GArC3BZ,IAAMC,WA0C3BsB,E,iLAEF,OACE,yBAAK7B,UAAU,cACb,4BACGa,EAAOX,KAAI,SAAS4B,EAAO1B,GACxB,IAAI2B,EAAI,0CAAsCD,EAAtC,QACR,OACI,wBAAIzB,IAAKD,GACT,yBAAK4B,IAAKD,EAAME,MAAM,OADtB,OAGCH,Y,GAXKxB,IAAMC,WA0Cf2B,E,iLApBX,OAEE,yBAAKlC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OACb,qCACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,oCACA,kBAAC,EAAD,c,GAbMM,IAAMC,WC3FJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ec1892a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nclass Garden extends React.Component {\n  state = {\n    rows: [1, 2, 3],\n  };\n\n  render() {\n    return (\n        <div className=\"game-area\">\n        {this.state.rows.map(function(row, i){\n            return <GardenRow key={i} row={row}/>;\n        })}\n        </div>\n      );\n  }\n}\n\nclass GardenRow extends React.Component {\n  state = {\n    squares: [1, 2, 3],\n  };\n\n  render() {\n    return (\n        <div className=\"garden-row\">\n          {this.state.squares.map(function(square, i){\n              return <GardenSquare key={i} square={square}/>;\n          })}\n        </div>\n      );\n  }\n}\n\nlet GRASS = 0;\nlet DIRT=1;\nlet PLANTS = ['pumpkin', 'potato', 'radish', 'tomato', 'carrot', 'wheat'];\n\nclass GardenSquare extends React.Component {\n  state = {\n    square_state: GRASS,\n    plant_name: undefined\n  };\n\n  className = () => {\n    if(this.state.plant_name !== undefined) {\n      return `square ${this.state.plant_name}`\n    }\n    if (this.state.square_state === GRASS)\n      return 'square grass';\n    if (this.state.square_state === DIRT)\n      return 'square dirt';\n    return 'square';\n  }\n\n  handleClick = (e) => {\n    let current_state = this.state.square_state;\n    if (current_state !== DIRT){\n      this.setState({square_state: current_state+1});\n    }\n    else {\n      let min = 0; let max=1;\n      var random = Math.floor(10 * Math.random() * (+max - +min) + +min);\n      console.log(random);\n      let plant_name = PLANTS[random];\n      console.log(plant_name);\n      this.setState({plant_name})\n      if (plant_name === undefined)\n        this.setState({square_state: GRASS})\n    }\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className={this.className()} onClick={this.handleClick}></div>\n    );\n  }\n}\n\nclass SeedsList extends React.Component {\n  render () {\n    return (\n      <div className=\"seeds-list\">\n        <ul>\n          {PLANTS.map(function(plant, i){\n              let icon = `https://www.growstuff.org/crops/${plant}.svg`;\n              return (\n                  <li key={i}>\n                  <img src={icon} width=\"25\" />\n                  &nbsp;\n                  {plant}\n              </li>);\n          })}\n        </ul>\n      </div>\n      );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"row\">\n          <div className=\"col\">\n            <h1>seeds</h1>\n            <SeedsList />\n          </div>\n          <div className=\"col\">\n            <h1>farm</h1>\n            <Garden />\n          </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}